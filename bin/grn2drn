#!/usr/bin/env ruby
# -*- coding: utf-8 -*-
#
# Copyright (C) 2013-2014 Droonga Project
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License version 2.1 as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

require "ostruct"
require "optparse"

require "grn2drn/command-converter"

options = OpenStruct.new
option_parser = OptionParser.new do |parser|
  parser.separator("")
  parser.separator("Converts Groonga commands to Droonga messages")

  parser.separator("")
  parser.separator("Required parameters:")
  parser.on("--dataset=DATASET",
            "Use DATASET as \"dataset\" field value") do |dataset|
    options.dataset = dataset
  end

  parser.separator("")
  parser.separator("Optional parameters:")
  parser.on("--id-prefix=PREFIX",
            "Use PREFIX as prefix of IDs") do |prefix|
    options.id_prefix = prefix
  end

  parser.on("--date=DATE",
            "Use DATE as \"date\" field value") do |date|
    options.date = date
  end

  parser.on("--reply-to=TO",
            "Use TO as \"replyTo\" field value",
            "Responses from Droonga engine will be sent to TO.") do |to|
    options.reply_to = to
  end
end
args = option_parser.parse!(ARGV)

if options.dataset.nil?
  puts("--dataset option is missed.")
  exit(false)
end

convert_options = {
  :id_prefix => options.id_prefix,
  :date => options.date,
  :reply_to => options.reply_to,
  :dataset => options.dataset,
}
converter = Grn2Drn::CommandConverter.new(convert_options)

source_file = args[0]
result_file = args[1]

def open_input(source_file)
  if source_file.nil?
    yield(STDIN)
  else
    File.open(source_file) do |input|
      yield(input)
    end
  end
end

def open_output(result_file)
  if result_file.nil?
    yield($stdout)
  else
    File.open("w", result_file) do |output|
      yield(output)
    end
  end
end

open_input(source_file) do |input|
  open_output(result_file) do |output|
    converter.convert(input) do |command|
      output.puts(JSON.generate(command))
    end
  end
end
